"""
Report Generation Module

This module provides functionality to generate structured reports of
contradictions and issues found in documents.
"""

import os
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime
from pathlib import Path
from jinja2 import Environment, FileSystemLoader, Template
import markdown

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ReportGenerator:
    """Generates structured reports from contradiction analysis results."""
    
    def __init__(self, template_dir: str = "templates"):
        """
        Initialize the report generator.
        
        Args:
            template_dir: Directory containing Jinja2 templates
        """
        self.template_dir = Path(template_dir)
        self.template_dir.mkdir(exist_ok=True)
        
        # Initialize Jinja2 environment
        self.env = Environment(
            loader=FileSystemLoader(str(self.template_dir)),
            autoescape=True
        )
        
        # Create default templates if they don't exist
        self._create_default_templates()
    
    def _create_default_templates(self):
        """Create default Jinja2 templates."""
        
        # Main report template
        main_template = """# Smart Doc Checker Report

**Generated on:** {{ report_date }}  
**Analysis Summary:** {{ summary.total_documents }} documents analyzed

## Executive Summary

- **Total Statements Analyzed:** {{ summary.total_statements }}
- **Contradictions Found:** {{ summary.total_contradictions }}
- **Overall Consistency Score:** {{ "%.2f"|format(summary.overall_consistency_score * 100) }}%

### Breakdown:
- Intra-document contradictions: {{ summary.intra_document_contradictions }}
- Cross-document contradictions: {{ summary.cross_document_contradictions }}

## Document Analysis

{% for doc_name, doc_results in individual_documents.items() %}
### {{ doc_name }}

- **Statements:** {{ doc_results.total_statements }}
- **Contradictions:** {{ doc_results.contradictions_found }}
- **Consistency Score:** {{ "%.2f"|format(doc_results.consistency_score * 100) }}%

{% if doc_results.contradictions %}
#### Contradictions Found:

{% for contradiction in doc_results.contradictions %}
**Contradiction {{ loop.index }}** (Score: {{ "%.3f"|format(contradiction.contradiction_score) }})

- **Statement 1:** {{ contradiction.statement1.text }}
- **Statement 2:** {{ contradiction.statement2.text }}
- **Confidence:** {{ "%.3f"|format(contradiction.confidence) }}

{% endfor %}
{% endif %}

{% endfor %}

## Cross-Document Contradictions

{% if cross_document_contradictions %}
{% for contradiction in cross_document_contradictions %}
### Cross-Document Contradiction {{ loop.index }}

**Documents:** {{ contradiction.document1 }} ↔ {{ contradiction.document2 }}  
**Contradiction Score:** {{ "%.3f"|format(contradiction.contradiction_score) }}

- **{{ contradiction.document1 }}:** {{ contradiction.statement1.text }}
- **{{ contradiction.document2 }}:** {{ contradiction.statement2.text }}
- **Confidence:** {{ "%.3f"|format(contradiction.confidence) }}

{% endfor %}
{% else %}
No cross-document contradictions found.
{% endif %}

## Recommendations

{% if summary.total_contradictions > 0 %}
### High Priority Issues
- Review {{ summary.total_contradictions }} contradictions identified above
- Verify factual accuracy of conflicting statements
- Consider updating documents to resolve inconsistencies

### Suggested Actions
1. **Fact Verification:** Cross-reference contradictory statements with reliable sources
2. **Document Review:** Have subject matter experts review flagged content
3. **Content Updates:** Revise documents to eliminate contradictions
4. **Process Improvement:** Implement review processes to prevent future contradictions

{% else %}
✅ **No contradictions detected!** All documents appear to be consistent.
{% endif %}

---
*Report generated by Smart Doc Checker Agent*
"""
        
        # HTML template
        html_template = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Doc Checker Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .header { background-color: #f4f4f4; padding: 20px; border-radius: 5px; }
        .summary { background-color: #e8f4fd; padding: 15px; margin: 20px 0; border-radius: 5px; }
        .contradiction { background-color: #ffe6e6; padding: 15px; margin: 10px 0; border-left: 4px solid #ff4444; }
        .no-issues { background-color: #e6ffe6; padding: 15px; margin: 20px 0; border-left: 4px solid #44ff44; }
        .score { font-weight: bold; color: #333; }
        .recommendations { background-color: #fff3cd; padding: 15px; margin: 20px 0; border-radius: 5px; }
        h1, h2, h3 { color: #333; }
        .timestamp { color: #666; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Smart Doc Checker Report</h1>
        <p class="timestamp">Generated on: {{ report_date }}</p>
    </div>

    <div class="summary">
        <h2>Executive Summary</h2>
        <p><strong>Documents Analyzed:</strong> {{ summary.total_documents }}</p>
        <p><strong>Total Statements:</strong> {{ summary.total_statements }}</p>
        <p><strong>Contradictions Found:</strong> {{ summary.total_contradictions }}</p>
        <p><strong>Overall Consistency Score:</strong> <span class="score">{{ "%.2f"|format(summary.overall_consistency_score * 100) }}%</span></p>
    </div>

    {% if summary.total_contradictions > 0 %}
    <h2>Contradictions Found</h2>
    
    {% for doc_name, doc_results in individual_documents.items() %}
    {% if doc_results.contradictions %}
    <h3>{{ doc_name }}</h3>
    {% for contradiction in doc_results.contradictions %}
    <div class="contradiction">
        <h4>Contradiction {{ loop.index }} (Score: {{ "%.3f"|format(contradiction.contradiction_score) }})</h4>
        <p><strong>Statement 1:</strong> {{ contradiction.statement1.text }}</p>
        <p><strong>Statement 2:</strong> {{ contradiction.statement2.text }}</p>
        <p><strong>Confidence:</strong> {{ "%.3f"|format(contradiction.confidence) }}</p>
    </div>
    {% endfor %}
    {% endif %}
    {% endfor %}

    {% if cross_document_contradictions %}
    <h3>Cross-Document Contradictions</h3>
    {% for contradiction in cross_document_contradictions %}
    <div class="contradiction">
        <h4>Cross-Document Contradiction {{ loop.index }}</h4>
        <p><strong>Documents:</strong> {{ contradiction.document1 }} ↔ {{ contradiction.document2 }}</p>
        <p><strong>{{ contradiction.document1 }}:</strong> {{ contradiction.statement1.text }}</p>
        <p><strong>{{ contradiction.document2 }}:</strong> {{ contradiction.statement2.text }}</p>
        <p><strong>Contradiction Score:</strong> {{ "%.3f"|format(contradiction.contradiction_score) }}</p>
    </div>
    {% endfor %}
    {% endif %}

    <div class="recommendations">
        <h2>Recommendations</h2>
        <ul>
            <li>Review all {{ summary.total_contradictions }} contradictions identified above</li>
            <li>Verify factual accuracy of conflicting statements</li>
            <li>Consider updating documents to resolve inconsistencies</li>
            <li>Implement review processes to prevent future contradictions</li>
        </ul>
    </div>

    {% else %}
    <div class="no-issues">
        <h2>✅ No Contradictions Detected!</h2>
        <p>All documents appear to be consistent. Great job!</p>
    </div>
    {% endif %}

    <hr>
    <p><em>Report generated by Smart Doc Checker Agent</em></p>
</body>
</html>"""
        
        # Save templates
        with open(self.template_dir / "report_template.md", "w", encoding="utf-8") as f:
            f.write(main_template)
        
        with open(self.template_dir / "report_template.html", "w", encoding="utf-8") as f:
            f.write(html_template)
    
    def generate_markdown_report(self, analysis_results: Dict, 
                               output_file: Optional[str] = None) -> str:
        """
        Generate a Markdown report from analysis results.
        
        Args:
            analysis_results: Results from contradiction analysis
            output_file: Optional output file path
            
        Returns:
            Generated Markdown content
        """
        template = self.env.get_template("report_template.md")
        
        # Prepare data for template
        report_data = {
            'report_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'summary': analysis_results.get('summary', {}),
            'individual_documents': analysis_results.get('individual_documents', {}),
            'cross_document_contradictions': analysis_results.get('cross_document_contradictions', [])
        }
        
        # Render template
        markdown_content = template.render(**report_data)
        
        # Save to file if specified
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            logger.info(f"Markdown report saved to: {output_file}")
        
        return markdown_content
    
    def generate_html_report(self, analysis_results: Dict, 
                           output_file: Optional[str] = None) -> str:
        """
        Generate an HTML report from analysis results.
        
        Args:
            analysis_results: Results from contradiction analysis
            output_file: Optional output file path
            
        Returns:
            Generated HTML content
        """
        template = self.env.get_template("report_template.html")
        
        # Prepare data for template
        report_data = {
            'report_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'summary': analysis_results.get('summary', {}),
            'individual_documents': analysis_results.get('individual_documents', {}),
            'cross_document_contradictions': analysis_results.get('cross_document_contradictions', [])
        }
        
        # Render template
        html_content = template.render(**report_data)
        
        # Save to file if specified
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(html_content)
            logger.info(f"HTML report saved to: {output_file}")
        
        return html_content
    
    def generate_summary_report(self, analysis_results: Dict) -> Dict:
        """
        Generate a summary report with key metrics.
        
        Args:
            analysis_results: Results from contradiction analysis
            
        Returns:
            Summary dictionary
        """
        summary = analysis_results.get('summary', {})
        
        return {
            'timestamp': datetime.now().isoformat(),
            'total_documents': summary.get('total_documents', 0),
            'total_statements': summary.get('total_statements', 0),
            'total_contradictions': summary.get('total_contradictions', 0),
            'consistency_score': summary.get('overall_consistency_score', 1.0),
            'has_issues': summary.get('total_contradictions', 0) > 0,
            'severity': self._assess_severity(summary.get('total_contradictions', 0))
        }
    
    def _assess_severity(self, contradiction_count: int) -> str:
        """Assess the severity of contradictions found."""
        if contradiction_count == 0:
            return "None"
        elif contradiction_count <= 2:
            return "Low"
        elif contradiction_count <= 5:
            return "Medium"
        else:
            return "High"
    
    def generate_detailed_report(self, analysis_results: Dict, 
                               format: str = "markdown",
                               output_dir: str = "reports") -> Dict[str, str]:
        """
        Generate detailed reports in multiple formats.
        
        Args:
            analysis_results: Results from contradiction analysis
            format: Output format ("markdown", "html", "both")
            output_dir: Output directory for reports
            
        Returns:
            Dictionary mapping format to file path
        """
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results = {}
        
        if format in ["markdown", "both"]:
            md_file = output_path / f"contradiction_report_{timestamp}.md"
            self.generate_markdown_report(analysis_results, str(md_file))
            results['markdown'] = str(md_file)
        
        if format in ["html", "both"]:
            html_file = output_path / f"contradiction_report_{timestamp}.html"
            self.generate_html_report(analysis_results, str(html_file))
            results['html'] = str(html_file)
        
        return results


class ReportFormatter:
    """Utility class for formatting report data."""
    
    @staticmethod
    def format_contradiction_summary(contradictions: List[Dict]) -> str:
        """Format a summary of contradictions."""
        if not contradictions:
            return "No contradictions found."
        
        summary_lines = [f"Found {len(contradictions)} contradictions:"]
        
        for i, contradiction in enumerate(contradictions[:5], 1):  # Show first 5
            score = contradiction.get('contradiction_score', 0)
            summary_lines.append(f"{i}. Score: {score:.3f}")
        
        if len(contradictions) > 5:
            summary_lines.append(f"... and {len(contradictions) - 5} more")
        
        return "\n".join(summary_lines)
    
    @staticmethod
    def format_confidence_level(score: float) -> str:
        """Format confidence score as a readable level."""
        if score >= 0.8:
            return "Very High"
        elif score >= 0.6:
            return "High"
        elif score >= 0.4:
            return "Medium"
        elif score >= 0.2:
            return "Low"
        else:
            return "Very Low"


# Example usage
if __name__ == "__main__":
    generator = ReportGenerator()
    
    # Sample analysis results
    sample_results = {
        'summary': {
            'total_documents': 2,
            'total_statements': 10,
            'total_contradictions': 2,
            'overall_consistency_score': 0.8
        },
        'individual_documents': {
            'doc1': {
                'total_statements': 5,
                'contradictions_found': 1,
                'consistency_score': 0.8,
                'contradictions': []
            }
        },
        'cross_document_contradictions': []
    }
    
    # Generate reports
    md_content = generator.generate_markdown_report(sample_results)
    html_content = generator.generate_html_report(sample_results)
    
    print("Markdown report generated successfully!")
    print("HTML report generated successfully!")
